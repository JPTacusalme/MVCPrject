@model IEnumerable<MVCPrject.Models.Recipe>

@{
    ViewData["Title"] = "Recipes";
}
@section Styles {
    <link rel="stylesheet" href="~/css/recipe.css" />
    <style>
        .like-container:hover {
            transform: scale(1.1);
            transition: transform 0.2s ease;
        }

        .heart-icon {
            transition: fill 0.3s ease;
        }

        .like-container:hover .heart-icon {
            fill: #dc3545 !important;
        }
    </style>
}



<!-- Header Navigation -->
<div class="p-4 d-flex justify-content-between align-items-center">
    <h1 class=" text-start fs-1 fw-normal">Explore Recipe</h1>
    <div class="d-flex align-items-center gap-5">
        @if (User.Identity.IsAuthenticated)
        {
            <h2 class="fs-5">Welcome, @ViewBag.UserName!</h2>
        }
        else
        {
            <a href="/Landing/Login" class="btn btn-primary">Please log in</a>
        }




        <img src="~/img/image.png" alt="/" class="border rounded-pill" style="width: 48px;">
    </div>
</div>


<!-- Main Content Container -->
<div class=" overflow-auto" style="height: calc(100vh - 124px);">
    <div class="container">


        <div class="row mb-4">
            <!-- Search Bar -->
            <div class="d-flex justify-content-between align-items-center mb-3 ">
                <div class="col-md-4 d-flex justify-content-between gap-3">
                    <a class="text-decoration-none text-reset fs-4 fw-medium p-3 border-bottom border-primary">All</a>
                    <a class="text-decoration-none text-reset fs-4 fw-medium p-3">Trending</a>
                    <a class="text-decoration-none text-reset fs-4 fw-medium p-3">Top-Rated</a>
                </div>
                <div class="col-md-4 d-flex justify-content-end gap-3 px-3">
                    <button class="btn border border-2 border-opacity-75 fw-medium text-secondary fs-6">
                        <a>Compose Recipe</a>
                    </button>
                    <button
                        class="btn border border-2 border-opacity-75 fw-medium text-secondary fs-6 d-flex align-items-center gap-2">
                        <i data-feather="filter"></i>
                        <a href="/" class="text-decoration-none text-reset">Filter</a>
                    </button>
                </div>
                <div class="col-md-4">
                    <form asp-controller="Recipe" asp-action="Search" method="get"
                        class="input-group p-2 border rounded-4 bg-dark-subtle d-flex align-items-center gap-2">
                        <i data-feather="search"></i>
                        <input type="text" name="keywords"
                            class="fs-6 form-control border-0 bg-dark-subtle search-input rounded"
                            placeholder="Search For recipe, users, posts, ingredients....." />
                        <button type="submit" class="rounded text-white fw-medium border-0 py-1 px-3"
                            style="background-color: #EC433E;">Search</button>
                    </form>
                </div>
            </div>

            <!-- Recipe Filter Navigation - Simple Version -->
            <div class="mb-4">
                <button onclick="addKeyword('Dinner')"
                    class="btn btn-warning rounded-3 text-white fw-medium fs-6 py-0 px-2">Dinner</button>
                <button onclick="addKeyword('Main Course')"
                    class="btn btn-warning rounded-3 text-white fw-medium fs-6 py-0 px-2">Main Course</button>
                <button onclick="addKeyword('Dessert')"
                    class="btn btn-warning rounded-3 text-white fw-medium fs-6 py-0 px-2">Dessert</button>
                <button onclick="addKeyword('Breakfast')"
                    class="btn btn-warning rounded-3 text-white fw-medium fs-6 py-0 px-2">Breakfast</button>
                <button onclick="addKeyword('Lunch')"
                    class="btn btn-warning rounded-3 text-white fw-medium fs-6 py-0 px-2">Lunch</button>
                <button onclick="addKeyword('Snack')"
                    class="btn btn-warning rounded-3 text-white fw-medium fs-6 py-0 px-2">Snack</button>
                <button onclick="addKeyword('Appetizer')"
                    class="btn btn-warning rounded-3 text-white fw-medium fs-6 py-0 px-2">Appetizer</button>
                <button onclick="addKeyword('Side Dish')"
                    class="btn btn-warning rounded-3 text-white fw-medium fs-6 py-0 px-2">Side Dish</button>
                <button onclick="addKeyword('Soup')"
                    class="btn btn-warning rounded-3 text-white fw-medium fs-6 py-0 px-2">Soup</button>
                <button onclick="addKeyword('Salad')"
                    class="btn btn-warning rounded-3 text-white fw-medium fs-6 py-0 px-2">Salad</button>
                <button onclick="addKeyword('Healthy')"
                    class="btn btn-warning rounded-3 text-white fw-medium fs-6 py-0 px-2">Healthy</button>
                <button onclick="addKeyword('Vegetarian')"
                    class="btn btn-warning rounded-3 text-white fw-medium fs-6 py-0 px-2">Vegetarian</button>
                <button onclick="addKeyword('Vegan')"
                    class="btn btn-warning rounded-3 text-white fw-medium fs-6 py-0 px-2">Vegan</button>
                <button onclick="addKeyword('Comfort Food')"
                    class="btn btn-warning rounded-3 text-white fw-medium fs-6 py-0 px-2">Comfort
                    Food</button>

                <button onclick="clearFilters()" class="btn btn-outline-secondary btn-sm fw-medium fs-6 py-0 px-2">Clear
                    All</button>
            </div>

            <div>
                <h1 class=" text-start fs-2 fw-normal pb-4">Explore Recipe</h1>
            </div>

            <script>
                function addKeyword(keyword) {
                    var keywords = new URLSearchParams(window.location.search).get('keywords') || '';
                    var list = keywords ? keywords.split(',') : [];

                    if (!list.includes(keyword)) {
                        list.push(keyword);
                        window.location.href = '/Recipe/Search?keywords=' + list.join(',');
                    }
                }

                function clearFilters() {
                    window.location.href = '/Recipe/Search';
                }

                // Toggle like/unlike functionality
                async function toggleLike(recipeId, element) {
                    const heartIcon = element.querySelector('.heart-icon');
                    const isLiked = heartIcon.style.fill === 'rgb(220, 53, 69)' || heartIcon.getAttribute('data-liked') === 'true';

                    try {
                        const endpoint = isLiked ? '/Recipe/Unlike' : '/Recipe/Like';
                        const response = await fetch(endpoint, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({ recipeId: recipeId })
                        });

                        const result = await response.json();

                        if (result.success) {
                            // Update the like count
                            const likeCountSpan = element.querySelector('.like-count');
                            likeCountSpan.textContent = result.likeCount;

                            // Toggle heart appearance
                            if (isLiked) {
                                // Unlike - make heart empty
                                heartIcon.style.fill = 'none';
                                heartIcon.style.stroke = '#dc3545';
                                heartIcon.setAttribute('data-liked', 'false');
                            } else {
                                // Like - make heart filled
                                heartIcon.style.fill = '#dc3545';
                                heartIcon.style.stroke = '#dc3545';
                                heartIcon.setAttribute('data-liked', 'true');
                            }
                        }
                    } catch (error) {
                        console.error('Error toggling like:', error);
                        showToast('An error occurred while updating the like.', 'error');
                    }
                }

                // Simple toast notification function
                function showToast(message, type) {
                    // Create toast element
                    const toast = document.createElement('div');
                    toast.className = `alert alert-${type === 'success' ? 'success' : type === 'warning' ? 'warning' : 'danger'} position-fixed`;
                    toast.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
                    toast.textContent = message;

                    // Add to page
                    document.body.appendChild(toast);

                    // Remove after 3 seconds
                    setTimeout(() => {
                        toast.remove();
                    }, 3000);
                }
            </script>


            @if (!Model.Any())
            {
                <!-- Empty State -->
                <div class="row justify-content-center">
                    <div class="col-md-6">
                        <div class="card text-center">
                            <div class="card-body">
                                <h4 class="card-title">No Recipes Available</h4>
                                <p class="card-text">No recipes available at the moment.</p>
                            </div>
                        </div>
                    </div>
                </div>
            }
            else
            {


                <!-- Recipe Grid -->
                <div class="row">
                    @foreach (var recipe in Model)
                    {
                        <div class="col-sm-6 col-md-3 col-lg-3 mb-4 ">
                            <div class="card recipe-card h-100 shadow-sm border-0 rounded-4 position-relative mx-3">
                                <!-- AI-Curated label -->
                                <span class="badge bg-danger position-absolute top-0 start-0 m-3 rounded-pill px-3 py-2 fs-6"
                                    style="z-index:2;">AI-Curated</span>

                                <!-- Image -->
                                <img class="card-img-top rounded-top-4" src="@recipe.RecipeImage" alt="@recipe.RecipeName"
                                    style="height: 200px; object-fit: cover;">

                                <div class="card-body d-flex flex-column">
                                    <!-- Title -->
                                    <h5 class="card-title fw-bold mb-2">@recipe.RecipeName</h5>
                                    <!-- Author row -->
                                    <div class="d-flex align-items-center mb-2">
                                        <span class="rounded-circle bg-secondary me-2"
                                            style="display:inline-block; width:32px; height:32px;"></span>
                                        <span class="fw-semibold">@recipe.RecipeAuthor</span>
                                    </div>
                                    <!-- Calendar and time -->
                                    <div class="d-flex align-items-center mb-2 text-secondary" style="font-size: 0.95rem;">
                                        <i data-feather="calendar" class="me-1"></i>
                                        <span class="me-3">Posted in @DateTime.Now.ToString("MMMM dd, yyyy")</span>
                                    </div>
                                    <div class="d-flex align-items-center mb-2 text-secondary" style="font-size: 0.95rem;">
                                        <i data-feather="clock" class="me-1"></i>
                                        <span>@recipe.TotalTimeMin min</span>
                                    </div>
                                    <!-- Likes and button -->
                                    <div class="d-flex align-items-center mt-auto justify-content-between">
                                        <div class="d-flex align-items-center text-danger like-container"
                                            style="cursor: pointer;" onclick="toggleLike(@recipe.RecipeID, this)">
                                            <i data-feather="heart" class="me-1 heart-icon" data-liked="false"
                                                style="fill: none; stroke: #dc3545;"></i>
                                            <span class="like-count">@(((IDictionary<int,
                                                                                        int>)ViewBag.LikeCounts)[recipe.RecipeID])</span>
                                </div>
                                <a asp-controller="Recipe" asp-action="Details" asp-route-id="@recipe.RecipeID"
                                    class="btn btn-danger rounded-pill px-4 py-1 fw-medium">View</a>
                            </div>
                        </div>
                    </div>
                </div>
                                }
                </div>
            }
        </div>
    </div>
</div>