@model MVCPrject.Models.Chat

<!-- Chatbot Modal -->
<div class="modal fade" id="chatbotModal" tabindex="-1" aria-labelledby="chatbotModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content" style="height: 600px;">
            <div class="modal-header justify-content-between" style="background: #EC433E color: white;">
                <h5 class="modal-title" id="chatbotModalLabel">
                    <i data-feather="message-circle" class="me-2" style="width: 20px; height: 20px;"></i>Recipe
                    Assistant
                </h5>
                <button type="button" class="btn text-white" data-bs-dismiss="modal" aria-label="Close"><i
                        data-feather="x" class="me-2" style="width: 30px; height: 30px;"></i></button>
            </div>
            <div class="modal-body p-0 d-flex flex-column" style="height: calc(600px - 120px);">
                <div class="chat-messages flex-grow-1 p-3" id="modal-chat-messages"
                    style="overflow-y: auto; max-height: 400px;">
                    @if (Model.History?.Any() == true)
                    {
                        @foreach (var line in Model.History)
                        {
                            if (line.StartsWith("User: "))
                            {
                                <div class="message user-message mb-3 fs-1">
                                    <div class="message-content">@line.Substring(6)</div>
                                </div>
                            }
                            else if (line.StartsWith("AI: "))
                            {
                                <div class="message ai-message mb-3">
                                    <div class="message-content">@line.Substring(4)</div>
                                </div>
                            }
                        }
                    }
                    else
                    {
                        <div class="message ai-message mb-3">
                            <div class="message-content">
                                Hello! I'm your recipe assistant. Ask me anything about
                                cooking, recipes, or meal planning!
                            </div>
                        </div>
                    }
                </div>

                <div class="modal-footer border-top">
                    <form id="modal-chatbot-form" class="w-100">
                        <div class="input-group">
                            <input type="text" id="modal-user-input" name="UserInput" class="form-control"
                                placeholder="Ask me about recipes, cooking tips, meal planning..." autocomplete="off"
                                value="@Model.UserInput" />
                            <button type="submit" class="btn"
                                style="background: linear-gradient(135deg, #EC433E 0%, #bd3732 100%); color: white;">
                                <i data-feather="send" class="me-2" style="width: 20px; height: 20px;"></i>
                            </button>
                        </div>

                        @* Persist history through hidden fields *@
                        @if (Model.History != null)
                        {
                            for (int i = 0; i < Model.History.Count; i++)
                            {
                                <input type="hidden" name="History[@i]" value="@Model.History[i]" />
                            }
                        }
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    #chatbotModal .message {
        display: flex;
        margin-bottom: 15px;
    }

    #chatbotModal .user-message {
        justify-content: flex-end;
    }

    #chatbotModal .ai-message {
        justify-content: flex-start;
    }

    #chatbotModal .message-content {
        max-width: 80%;
        padding: 12px 16px;
        border-radius: 18px;
        word-wrap: break-word;
        line-height: 1.4;
        font-size: 14px;
    }

    #chatbotModal .user-message .message-content {
        background: linear-gradient(135deg, #EC433E 0%, #bd3732 100%);
        color: white;
    }

    #chatbotModal .ai-message .message-content {
        background: #f8f9fa;
        color: #333;
        border: 1px solid #e9ecef;
    }

    #chatbotModal .chat-messages {
        background: #ffffff;
    }

    #chatbotModal .input-group .form-control {
        border-radius: 10px 0 0 10px;
        border-right: none;
        padding: 12px 20px;
    }

    #chatbotModal .input-group .btn {
        border-radius: 0 10px 10px 0;
        padding: 12px 20px;
        border-left: none;
    }

    #chatbotModal .input-group .form-control:focus {
        border-color: #ea6666;
        box-shadow: 0 0 0 0.2rem rgba(234, 102, 102, 0.25);
        border-right: none;
    }

    #chatbotModal .input-group .btn:focus {
        box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
        border-left: none;
    }

    /* Loading animation */
    .loading-dots {
        display: inline-block;
    }

    .loading-dots::after {
        content: '';
        animation: dots 1.5s steps(5, end) infinite;
    }

    /* Scrollbar styling */
    #chatbotModal .chat-messages::-webkit-scrollbar {
        width: 8px;
    }

    #chatbotModal .chat-messages::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 4px;
    }

    #chatbotModal .chat-messages::-webkit-scrollbar-thumb {
        background: #c1c1c1;
        border-radius: 4px;
    }

    #chatbotModal .chat-messages::-webkit-scrollbar-thumb:hover {
        background: #a8a8a8;
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const modal = document.getElementById('chatbotModal');
        const form = document.getElementById('modal-chatbot-form');
        const input = document.getElementById('modal-user-input');
        const messagesContainer = document.getElementById('modal-chat-messages');

        // Auto-scroll to bottom
        function scrollToBottom() {
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }

        // Focus input when modal opens
        modal.addEventListener('shown.bs.modal', function () {
            input.focus();
            scrollToBottom();
        });

        // Clear input when modal closes
        modal.addEventListener('hidden.bs.modal', function () {
            input.value = '';
        });

        form.addEventListener('submit', function (e) {
            e.preventDefault();

            const userInput = input.value.trim();
            if (!userInput) return;

            // Add user message to chat
            const userMessage = document.createElement('div');
            userMessage.className = 'message user-message mb-3';
            userMessage.innerHTML = `<div class="message-content">${userInput}</div>`;
            messagesContainer.appendChild(userMessage);

            // Add loading message
            const loadingMessage = document.createElement('div');
            loadingMessage.className = 'message ai-message loading-message mb-3';
            loadingMessage.innerHTML = `<div class="message-content"><i class="fas fa-robot me-2"></i>Thinking<span class="loading-dots"></span></div>`;
            messagesContainer.appendChild(loadingMessage);

            // Clear input and scroll
            input.value = '';
            scrollToBottom();

            // Prepare form data
            const formData = new FormData(form);
            formData.set('UserInput', userInput);

            // Send request
            fetch('/Chat/ChatbotPartial', {
                method: 'POST',
                body: formData
            })
                .then(response => response.json())
                .then(data => {
                    // Remove loading message
                    if (messagesContainer.contains(loadingMessage)) {
                        messagesContainer.removeChild(loadingMessage);
                    }

                    if (data.success) {
                        // Add AI response message
                        const aiMessage = document.createElement('div');
                        aiMessage.className = 'message ai-message mb-3';
                        aiMessage.innerHTML = `<div class="message-content"><i class="fas fa-robot me-2"></i>${data.aiResponse}</div>`;
                        messagesContainer.appendChild(aiMessage);

                        // Update hidden history fields
                        const existingHiddenInputs = form.querySelectorAll('input[type="hidden"]');
                        existingHiddenInputs.forEach(input => input.remove());

                        // Add new hidden inputs for history
                        if (data.history) {
                            data.history.forEach((historyItem, index) => {
                                const hiddenInput = document.createElement('input');
                                hiddenInput.type = 'hidden';
                                hiddenInput.name = `History[${index}]`;
                                hiddenInput.value = historyItem;
                                form.appendChild(hiddenInput);
                            });
                        }
                    } else {
                        // Add error message
                        const errorMessage = document.createElement('div');
                        errorMessage.className = 'message ai-message mb-3';
                        errorMessage.innerHTML = `<div class="message-content"><i class="fas fa-exclamation-triangle me-2"></i>${data.error || 'Sorry, I encountered an error. Please try again.'}</div>`;
                        messagesContainer.appendChild(errorMessage);
                    }

                    scrollToBottom();
                })
                .catch(error => {
                    console.error('Error:', error);
                    // Remove loading message
                    if (messagesContainer.contains(loadingMessage)) {
                        messagesContainer.removeChild(loadingMessage);
                    }

                    // Add error message
                    const errorMessage = document.createElement('div');
                    errorMessage.className = 'message ai-message mb-3';
                    errorMessage.innerHTML = `<div class="message-content"><i class="fas fa-exclamation-triangle me-2"></i>Sorry, I encountered an error. Please try again.</div>`;
                    messagesContainer.appendChild(errorMessage);

                    scrollToBottom();
                });
        });

        // Enter key to submit
        input.addEventListener('keypress', function (e) {
            if (e.key === 'Enter') {
                form.dispatchEvent(new Event('submit'));
            }
        });
    });
</script>